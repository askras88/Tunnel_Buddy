import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = """üëã –ü—Ä–∏–≤–µ—Ç, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–æ–≤–±–æ–π! ü§† –ì–æ—Ç–æ–≤ –ø–æ–∫–æ—Ä—è—Ç—å –ø—Ä–æ—Å—Ç–æ—Ä—ã —Å–µ—Ç–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π? 
–° Tunnel Buddy —Ç—ã –º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –≤ –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∏ –Ω–µ –ø–∞—Ä–∏—Ç—å—Å—è –æ —Å–∫–æ—Ä–æ—Å—Ç–∏! üöÄ –ß–µ–∫–∞—Ç—å —Å–≤–æ–π eligible, –±–æ—Ä–æ–∑–¥–∏—Ç—å Rutracker, –∏–≥—Ä–∞—Ç—å –≤ –ø–æ–∫–µ—Ä üÉè –∏–ª–∏ —Å–µ—Ä—Ñ–∏—Ç—å Pornhub –±–µ–∑ –ª–æ–≥–∏–Ω–∞. –ü–ª—é—Å, –æ–Ω —Å—Ç–æ–∏—Ç –º–µ–Ω—å—à–µ, —á–µ–º —Ç–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π NFT! üí∏
–ü–æ–¥–∫–ª—é—á–∞–π —Å–≤–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –∑–∞–±—É–¥—å –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö, –∫–∞–∫ –æ —Å–≤–æ–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ—É–¥–∞—á–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏! üòÇ"""

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
def start_menu():
    keyboard = [
        [InlineKeyboardButton("–ü–æ—á–µ–º—É –ø–ª–∞—Ç–Ω—ã–π VPN –ª—É—á—à–µ?", callback_data='why_vpn')],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='choose_subscription')],
        [InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", callback_data='instructions')],
        [InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data='download_app')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await context.bot.send_photo(chat_id=chat_id, photo="https://freeimage.host/i/dpppkxI")
    await context.bot.send_message(chat_id=chat_id, text=WELCOME_MESSAGE, reply_markup=start_menu())

# –ë–ª–æ–∫ ¬´–ü–æ—á–µ–º—É –ø–ª–∞—Ç–Ω—ã–π VPN –ª—É—á—à–µ?¬ª
async def why_vpn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['prev_menu'] = 'why_vpn'
    WHY_VPN_TEXT = """ü§î –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π VPN?
    
1. üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äî —Å Tunnel Buddy –≤–∞—à–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–∫–æ—Ä–æ—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ –±—ã—Å—Ç—Ä–æ–π, –∫–∞–∫ —É –≤–∞—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. –ù–∏–∫–∞–∫–∏—Ö —É—Ä–µ–∑–∞–Ω–∏–π –∏–ª–∏ –ª–∞–≥–æ–≤!
2. üí∏ –õ—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞ ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö VPN –Ω–∞ —Ä—ã–Ω–∫–µ, –Ω–æ —Å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.
3. üì±üíªüñ•Ô∏è –ú—É–ª—å—Ç–∏—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚Äî –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.
4. üîê –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –Ω–∞ 100% ‚Äî –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã, –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–µ–¥–∞ –≤ —Å–µ—Ç–∏.
5. üåç –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É –º–∏—Ä—É ‚Äî –æ–±—Ö–æ–¥–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"""
    
    await query.edit_message_text(text=WHY_VPN_TEXT, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]]))

# –ë–ª–æ–∫ ¬´–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª
def subscription_menu():
    keyboard = [
        [InlineKeyboardButton("1 –º–µ—Å—è—Ü / 2 $USDT / 200 RUB", callback_data='sub_1m')],
        [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ / 5 $USDT / 500 RUB", callback_data='sub_3m')],
        [InlineKeyboardButton("1 –≥–æ–¥ / 15 $USDT / 1500 RUB", callback_data='sub_1y')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def choose_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['prev_menu'] = 'choose_subscription'
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=subscription_menu())

# –ë–ª–æ–∫ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é¬ª
async def instructions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['prev_menu'] = 'instructions'
    await query.edit_message_text(text="üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]]))

# –ë–ª–æ–∫ ¬´–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª
async def download_app(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['prev_menu'] = 'download_app'
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", reply_markup=download_menu())

# –ú–µ–Ω—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def download_menu():
    keyboard = [
        [InlineKeyboardButton("iPhone", url="https://itunes.apple.com/app/outline-app/id1356177741")],
        [InlineKeyboardButton("Android", url="https://play.google.com/store/apps/details?id=org.outline.android.client")],
        [InlineKeyboardButton("Windows", url="https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe")],
        [InlineKeyboardButton("macOS", url="https://itunes.apple.com/app/outline-app/id1356178125")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    logger.info(f"Button pressed: {data}")
    await query.answer()

    if data == 'why_vpn':
        await why_vpn(update, context)
    elif data == 'choose_subscription':
        await choose_subscription(update, context)
    elif data == 'instructions':
        await instructions(update, context)
    elif data == 'download_app':
        await download_app(update, context)
    elif data == 'back':
        if context.user_data.get('prev_menu') == 'instructions':
            await instructions(update, context)
        elif context.user_data.get('prev_menu') == 'download_app':
            await download_app(update, context)
        else:
            await start(update, context)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
if __name__ == '__main__':
    application = ApplicationBuilder().token('YOUR_TOKEN_HERE').build()

    # –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
